{
	"info": {
		"_postman_id": "10d6b661-8169-4c0a-84c6-a04f41257566",
		"name": "JSONPlaceholderAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14519515"
	},
	"item": [
		{
			"name": "GET All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify first user has required fields\", function () {\r",
							"    var jsonData = pm.response.json()[0];\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('username');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('title', 'foo');\r",
							"    pm.expect(jsonData).to.have.property('body', 'bar');\r",
							"    pm.expect(jsonData).to.have.property('userId', 1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"foo\",\r\n  \"body\": \"bar\",\r\n  \"userId\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//pm.test(\"Empty response body\", function () {\r",
							"//    pm.expect(pm.response.text()).to.be.empty;\r",
							"//});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Post by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id', 1);\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All Comments from a Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each comment has correct structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (comment) {\r",
							"        pm.expect(comment).to.have.property('id');\r",
							"        pm.expect(comment).to.have.property('postId', 1);\r",
							"        pm.expect(comment).to.have.property('name');\r",
							"        pm.expect(comment).to.have.property('email');\r",
							"        pm.expect(comment).to.have.property('body');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/1/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All Posts by User ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each post has correct structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (post) {\r",
							"        pm.expect(post).to.have.property('id');\r",
							"        pm.expect(post).to.have.property('userId', 1);\r",
							"        pm.expect(post).to.have.property('title');\r",
							"        pm.expect(post).to.have.property('body');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/1/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All Comments by User ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each comment has correct structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (comment) {\r",
							"        pm.expect(comment).to.have.property('id');\r",
							"        pm.expect(comment).to.have.property('postId');\r",
							"        pm.expect(comment).to.have.property('name');\r",
							"        pm.expect(comment).to.have.property('email');\r",
							"        pm.expect(comment).to.have.property('body');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/1/comments",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1",
						"comments"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jsonplaceholder.typicode.com/"
		}
	]
}